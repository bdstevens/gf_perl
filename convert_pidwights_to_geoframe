#!/usr/bin/env perl

use strict;
use warnings;

use PIDwights::297Format;
use POSIX qw/strftime/;

## Provide for conversion between PIDwights' well status codes and GeoFrame's 
my %well_codes = (
	0 => 26,
	1 => 48,
	2 => 30,
	3 => 30,
	4 => 48,
	5 => 30,
	6 => 30,
	7 => 30,
	8 => 17,
	9 => -1,
	A => 27,
	L => 3,
	S => 16,
	T => 1
);

## Provide usage information
die "Usage: $0 <input_file> <county_list_file>\n" unless $#ARGV >= 0;

## Create a list of counties if provided
my @counties;
if (defined $ARGV[1]) {
	open COUNTIES, $ARGV[1] or die "Can't open file $ARGV[1]!\n";
	while (<COUNTIES>) {
		s/\r//;
		chomp;
		push @counties, $_
	}
	close COUNTIES
}

## Process the file
open INPUT, $ARGV[0] or die "Unable to open file \"$ARGV[0]\"!\n";
my $record = "";
my $included = my $total = 0;
my ($pidwights, $county, $date, $day, $month, $year);
while (<INPUT>) {
	## Remove any line endings
	s/\r//;
	chomp;
	if (/^START_US_WELL\s+\d+$/) {
		## START_US_WELL means we're starting a new record
		$record = ""
	} elsif (/^END_US_WELL\s+\d+$/) {
		## END_US_WELL means we've collected a record, so process it
		$total++;
		$pidwights = PIDwights::297Format->new($record);
		## Some entries seem to be missing location info; skip them
		unless ($pidwights->getLongitude && $pidwights->getLatitude) {
			print STDERR "Warning: discarding $pidwights->getUwi as it has no location information";
			next
		}
		## Skip this record if it's not in a desired county
		grep {substr($pidwights->getUwi, 2, 3) == $_} @counties or next if @counties;
		## Convert the date to a GeoFrame friendly format
		if ($pidwights->getSpudDate) {
			$day = substr($pidwights->getSpudDate, 6, 2);
			$month = substr($pidwights->getSpudDate, 4, 2);
			$year = substr($pidwights->getSpudDate, 0, 4);
			$date = POSIX::strftime("%d-%b-%Y", 0, 0, 0, $day, $month - 1, $year - 1900)
		} else {
			$date = ''
		}
		## Create the output
		$included++;
		print $pidwights->getUwi,
			"\t", $pidwights->getWellName,
			"\t", $pidwights->getLeaseName,
			"\t", $pidwights->getWellNumber,
			"\t", $pidwights->getLatitude,
			"\t", $pidwights->getLongitude,
			"\t", $pidwights->getOperator,
			"\t", $date,
			"\t", $pidwights->getElevation,
			"\t", $pidwights->getMeasuredDepth,
			"\t", $well_codes{$pidwights->getFinalWellClass}, "\n"
	} else {
		## Otherwise we're still collecting a record
		$record .= "\n$_"
	}
}
print STDERR "Processed $total wells\n";
print STDERR "Included $included wells\n";
close INPUT;
