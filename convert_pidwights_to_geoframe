#!/usr/bin/env perl

use strict;
use warnings;

use PI297Record;
use PI297File;
use POSIX qw/strftime/;

## Provide for conversion between PIDwights' well status codes and GeoFrame's 
my %well_codes = (
	0 => 26,
	1 => 48,
	2 => 30,
	3 => 30,
	4 => 48,
	5 => 30,
	6 => 30,
	7 => 30,
	8 => 17,
	9 => -1,
	A => 27,
	L => 3,
	S => 16,
	T => 1
);

## Provide usage information
die "Usage: $0 <input_file> {<county_list_file>}\n" unless $#ARGV >= 0;

## Create a list of counties if provided
my @counties;
if (defined $ARGV[1]) {
	open COUNTIES, $ARGV[1] or die "Can't open file $ARGV[1]!\n";
	while (<COUNTIES>) {
		s/\r//;
		chomp;
		push @counties, $_
	}
	close COUNTIES
}

## Process the file
my $input = PI297File->read($ARGV[0]);
my $included = my $total = 0;
my ($record, $county, $date, $day, $month, $year);
while ($record = $input->nextRecord) {
	$total++;
	## Some entries seem to be missing location info; skip them
	unless ($record->getLongitude && $record->getLatitude) {
		print STDERR "Warning: discarding ", $record->getUwi, " as it has no location information\n";
		next
	}
	## Skip this record if it's not in a desired county
	grep {substr($record->getUwi, 2, 3) == $_} @counties or next if @counties;
	## Convert the date to a GeoFrame friendly format
	if ($record->getSpudDate) {
		$day = substr($record->getSpudDate, 6, 2);
		$month = substr($record->getSpudDate, 4, 2);
		$year = substr($record->getSpudDate, 0, 4);
		$date = POSIX::strftime("%d-%b-%Y", 0, 0, 0, $day, $month - 1, $year - 1900)
	} else {
		$date = ''
	}
	## Create the output
	$included++;
	print $record->getUwi,
		"\t", $record->getWellName,
		"\t", $record->getLeaseName,
		"\t", $record->getWellNumber,
		"\t", $record->getLatitude,
		"\t", $record->getLongitude,
		"\t", $record->getOperator,
		"\t", $date,
		"\t", $record->getElevation,
		"\t", $record->getMeasuredDepth,
		"\t", $well_codes{$record->getFinalWellClass}, "\n"
}
print STDERR "Processed $total wells\n";
print STDERR "Included $included wells\n";
