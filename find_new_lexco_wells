#!/usr/bin/env perl

use strict;
use warnings;

use Getopt::Long;
use GFProject;
use Helpers;
use LexcoRecord;
use LexcoFile;
use POSIX qw/strftime/;

## Provide for conversion between Lexco's well status codes and GeoFrame's 
my %well_codes = (
	"COM" => 1,
	"DRL" => 1,
	"GS" => 17,
	"OGS" => 17,
	"OS" => 17,
	"CNL" => 26,
	"DRY" => 26,
	"GX" => 26,
	"OGX" => 26,
	"OX" => 26,
	"GP" => 30,
	"OP" => 48,
	"OGP" => 50
);

## Provide usage information
my $usage_text =
"Usage: $0 accepts these parameters:\n" .
"  (opt) '-i' will interactively request all parameters\n" .
"  (req) GeoFrame project name\n" .
"  (req) GeoFrame project password\n" .
"  (req) Name of file containing list of blocks\n" .
"  (req) Name of Lexco well export file (well.txt)\n"
"  (req) Name of output file to create\n";
my $ask;
GetOptions("i" => \$ask);
unless ($#ARGV == 4 or $ask) { print STDERR $usage_text; exit 1 }

## If we're interactive, ask for everything; otherwise, grab what we're given
my ($proj_name, $proj_pass, $blocks_file, $lexco_file, $output_file);
if ($ask) {
	$proj_name = prompt_with "Enter name of GeoFrame project to query: ";
	$proj_pass = prompt_with "Enter password of GeoFrame project to query: ";
	$blocks_file = prompt_with "Enter name of file containing block list: ";
	$lexco_file = prompt_with "Enter name of Lexco export file: ";
	$output_file = prompt_with "Enter name of output file to create: "
} else {
	($proj_name, $proj_pass, $blocks_file, $lexco_file, $output_file) = @ARGV
}

## Connect to the project
my $proj = GFProject->connect($proj_name, $proj_pass) or die "Could not connect to GeoFrame project\n";

## Get a list of all UWI's currently in the project
my %uwis_in_project;
map { $uwis_in_project{$_} = 1 } $proj->getAllUwis;

## Create a list of blocks to include
my %blocks;
open (BLOCKS, $blocks_file) or die "Could not open file $blocks_file\n";
while(<BLOCKS>) {
	chomp;
	if ($_ =~ /\r/) {
		for (split /\r/) {
			$_ =~ /^([^_]+)_0*([^_]+)/;
			$blocks{join("_", $1, $2)} = ""
		}
	} else {
		$_ =~ /^([^_]+)_0*([^_]+)/;
		$blocks{join("_", $1, $2)} = ""
	}
}

## Open the output file
open OUTPUT, ">$output_file" or die;

## Process the file
my $input = LexcoFile->read($lexco_file);
my $included = my $total = 0;
my ($record, $date, $day, $month, $year);
while ($record = $input->nextRecord) {
	$total++;
	## If this UWI already exists in the project
	## or if a comparable 12 digit UWI already exists in the project
	## or if a comparable 10 digit UWI already exists in the project
	## skip it
	next if (
		$uwis_in_project{$record->getUwi} or
		$uwis_in_project{substr($record->getUwi, 0, 12)} or
		$uwis_in_project{substr($record->getUwi, 0, 10)});
		
	## If we have a bogus (or no) latitude or longitude, skip it
	if (! $record->getLongitude || ! $record->getLatitude || $record->getLongitude =~ /^\D+$/ || $record->getLatitude =~ /^\D+$/) {
		print STDERR "Warning: discarding bogus record (uwi \"", $record->getUwi, "\")\n";
		next
	}
	
	## If it's not in a block we want, skip it
	$record->getWellName =~ /([^_]+_[^_]+)_/;
	next unless exists $blocks{$1};
	
	## Convert the date to a GeoFrame friendly format
	if ($record->getSpudDate) {
		m|(\d+)/(\d+)/(\d+)|;
		($month, $day, $year) = ($1, $2, $3);
		$date = POSIX::strftime("%d-%b-%Y", 0, 0, 0, $day, $month - 1, $year - 1900)
	} else {
		$date = ''
	}
	
	## Create the output
	$included++;
	print OUTPUT join("|", $record->getUwi, $record->getWellName, $record->getLeaseName, $record->getWellNumber, $record->getLatitude, $record->getLongitude, $record->getOperator, $date, $record->getElevation, $record->getMeasuredDepth, $well_codes{$record->getFinalWellClass}), "\n"
}
close OUTPUT;

print STDERR "Processed $total wells\n";
print STDERR "Included $included wells\n";
